blueprint:
    name: IKEA Rodret Use with Zigbee2MQTT
    description: '## Control Light(s) with IKEA RODRET (E2201) Dimmer remote (v1.0)


                  Only for use with Zigbee2MQTT
                  (cf [MQTT](https://www.home-assistant.io/integrations/mqtt) + [Z2M addon](https://github.com/zigbee2mqtt/hassio-zigbee2mqtt#installation)).


                  Available controls:

                  - Press the **on** button to turn on the light(s)

                  - Press the **off** button to turn off the light(s)

                  - Press and hold the **on** button to increase the brightness

                  - Press and hold the **off** button to decrease the brightness down to 10%'
    domain: automation
    author: Beckynet
    homeassistant:
      min_version: 2024.10.0
    input:
      rodret_entity:
        name: Rodret remote
        description: IKEA Rodret remote
        selector:
          entity:
            filter:
              - integration: mqtt
              - domain:
                - sensor
      target_lights:
        name: Target Lights
        description: Select multiple lights
        selector:
          entity:
            filter:
              - domain: light
            multiple: true

variables:
  remote_control: !input rodret_entity
  light_entities: !input target_lights

triggers:
  - trigger: state
    entity_id: !input rodret_entity

conditions: []

actions:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - action: light.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: !input target_lights
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
        sequence:
          - action: light.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: !input target_lights
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'brightness_move_up' }}"
        sequence:
          - variables:
              total_brightness: >
                {% set ns = namespace(total = 0) %}
                {% for light in light_entities %}
                  {% if state_attr(light, 'brightness') is not none %}
                    {% set ns.total = ns.total + state_attr(light, 'brightness') %}
                  {% endif %}
                {% endfor %}
                {{ ns.total }}
              light_count: >
                {% set ns = namespace(count = 0) %}
                {% for light in light_entities %}
                  {% if state_attr(light, 'brightness') is not none %}
                    {% set ns.count = ns.count + 1 %}
                  {% endif %}
                {% endfor %}
                {{ ns.count }}
              average_brightness: >
                {% if light_count > 0 %}
                  {{ (total_brightness / light_count) | int }}
                {% else %}
                  0
                {% endif %}
          - action: light.turn_on
            metadata: {}
            target:
              entity_id: !input target_lights
            data:
              brightness: >
                {% set new_brightness = average_brightness + 25 %}
                {% if new_brightness > 255 %}
                  255
                {% else %}
                  {{ new_brightness }}
                {% endif %}
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'brightness_move_down' }}"
        sequence:
          - variables:
              total_brightness: >
                {% set ns = namespace(total = 0) %}
                {% for light in light_entities %}
                  {% if state_attr(light, 'brightness') is not none %}
                    {% set ns.total = ns.total + state_attr(light, 'brightness') %}
                  {% endif %}
                {% endfor %}
                {{ ns.total }}
              light_count: >
                {% set ns = namespace(count = 0) %}
                {% for light in light_entities %}
                  {% if state_attr(light, 'brightness') is not none %}
                    {% set ns.count = ns.count + 1 %}
                  {% endif %}
                {% endfor %}
                {{ ns.count }}
              average_brightness: >
                {% if light_count > 0 %}
                  {{ (total_brightness / light_count) | int }}
                {% else %}
                  0
                {% endif %}
          - action: light.turn_on
            metadata: {}
            target:
              entity_id: !input target_lights
            data:
              brightness: >
                {% set new_brightness = average_brightness - 25 %}
                {% if new_brightness < 25 %}
                  25
                {% else %}
                  {{ new_brightness }}
                {% endif %}

mode: single
